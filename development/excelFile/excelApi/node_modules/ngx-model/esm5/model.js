/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { BehaviorSubject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
/**
 * @template T
 */
var Model = /** @class */ (function () {
    /**
     * @param {?} initialData
     * @param {?} immutable
     * @param {?} sharedSubscription
     * @param {?=} clone
     */
    function Model(initialData, immutable, sharedSubscription, clone) {
        this._data = new BehaviorSubject(initialData);
        this.data$ = this._data
            .asObservable()
            .pipe(map(function (data) { return immutable
            ? clone
                ? clone(data)
                : JSON.parse(JSON.stringify(data))
            : data; }), sharedSubscription ? shareReplay(1) : map(function (data) { return data; }));
    }
    /**
     * @return {?}
     */
    Model.prototype.get = function () {
        return this._data.getValue();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    Model.prototype.set = function (data) {
        this._data.next(data);
    };
    return Model;
}());
export { Model };
function Model_tsickle_Closure_declarations() {
    /** @type {?} */
    Model.prototype._data;
    /** @type {?} */
    Model.prototype.data$;
}
/**
 * @template T
 */
var ModelFactory = /** @class */ (function () {
    function ModelFactory() {
    }
    /**
     * @param {?} initialData
     * @return {?}
     */
    ModelFactory.prototype.create = function (initialData) {
        return new Model(initialData, true, false);
    };
    /**
     * @param {?} initialData
     * @return {?}
     */
    ModelFactory.prototype.createMutable = function (initialData) {
        return new Model(initialData, false, false);
    };
    /**
     * @param {?} initialData
     * @return {?}
     */
    ModelFactory.prototype.createMutableWithSharedSubscription = function (initialData) {
        return new Model(initialData, false, true);
    };
    /**
     * @param {?} initialData
     * @param {?} clone
     * @return {?}
     */
    ModelFactory.prototype.createWithCustomClone = function (initialData, clone) {
        return new Model(initialData, true, false, clone);
    };
    return ModelFactory;
}());
export { ModelFactory };
/**
 * @return {?}
 */
export function useModelFactory() {
    return new ModelFactory();
}
export var /** @type {?} */ MODEL_PROVIDER = {
    provide: ModelFactory,
    useFactory: useModelFactory
};
//# sourceMappingURL=model.js.map
