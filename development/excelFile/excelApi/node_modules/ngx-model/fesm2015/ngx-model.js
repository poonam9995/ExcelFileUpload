import { BehaviorSubject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class Model {
    /**
     * @param {?} initialData
     * @param {?} immutable
     * @param {?} sharedSubscription
     * @param {?=} clone
     */
    constructor(initialData, immutable, sharedSubscription, clone) {
        this._data = new BehaviorSubject(initialData);
        this.data$ = this._data
            .asObservable()
            .pipe(map((data) => immutable
            ? clone
                ? clone(data)
                : JSON.parse(JSON.stringify(data))
            : data), sharedSubscription ? shareReplay(1) : map((data) => data));
    }
    /**
     * @return {?}
     */
    get() {
        return this._data.getValue();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set(data) {
        this._data.next(data);
    }
}
/**
 * @template T
 */
class ModelFactory {
    /**
     * @param {?} initialData
     * @return {?}
     */
    create(initialData) {
        return new Model(initialData, true, false);
    }
    /**
     * @param {?} initialData
     * @return {?}
     */
    createMutable(initialData) {
        return new Model(initialData, false, false);
    }
    /**
     * @param {?} initialData
     * @return {?}
     */
    createMutableWithSharedSubscription(initialData) {
        return new Model(initialData, false, true);
    }
    /**
     * @param {?} initialData
     * @param {?} clone
     * @return {?}
     */
    createWithCustomClone(initialData, clone) {
        return new Model(initialData, true, false, clone);
    }
}
/**
 * @return {?}
 */
function useModelFactory() {
    return new ModelFactory();
}
const /** @type {?} */ MODEL_PROVIDER = {
    provide: ModelFactory,
    useFactory: useModelFactory
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxModelModule {
}
NgxModelModule.decorators = [
    { type: NgModule, args: [{
                providers: [MODEL_PROVIDER]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxModelModule, Model, ModelFactory, useModelFactory, MODEL_PROVIDER };
//# sourceMappingURL=ngx-model.js.map
